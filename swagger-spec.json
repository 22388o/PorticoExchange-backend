{
  "openapi": "3.0.0",
  "info": {
    "title": "Boltz API",
    "version": "3.4.0"
  },
  "paths": {
    "/nodes": {
      "get": {
        "description": "Information about the Lightning nodes the backend is connected to",
        "tags": [
          "Nodes"
        ],
        "responses": {
          "200": {
            "description": "Lightning node information",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/NodeInfo"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nodes/stats": {
      "get": {
        "description": "Statistics about the Lightning nodes the backend is connected to",
        "tags": [
          "Nodes"
        ],
        "responses": {
          "200": {
            "description": "Statistics about Lightning nodes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "object",
                    "properties": {
                      "total": {
                        "$ref": "#/components/schemas/NodeStats"
                      }
                    },
                    "additionalProperties": {
                      "$ref": "#/components/schemas/NodeStats"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/swap/submarine": {
      "post": {
        "description": "Create a new Submarine Swap from onchain to lightning",
        "tags": [
          "Submarine"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmarineRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created Submarine Swap",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmarineResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error that caused the Submarine Swap creation to fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/swap/submarine/refund": {
      "post": {
        "description": "Requests a partial signature for a cooperative Submarine Swap refund transaction",
        "tags": [
          "Submarine"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubmarineRefundRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A partial signature",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialSignature"
                }
              }
            }
          },
          "400": {
            "description": "Error that caused signature request to fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/swap/reverse": {
      "post": {
        "description": "Create a new Reverse Swap from lightning to onchain",
        "tags": [
          "Reverse"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReverseRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The created Reverse Swap",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReverseResponse"
                }
              }
            }
          },
          "400": {
            "description": "Error that caused the Reverse Swap creation to fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/swap/reverse/claim": {
      "post": {
        "description": "Requests a partial signature for a cooperative Reverse Swap claim transaction",
        "tags": [
          "Reverse"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReverseClaimRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A partial signature",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartialSignature"
                }
              }
            }
          },
          "400": {
            "description": "Error that caused signature request to fail",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "NodeInfo": {
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string"
          },
          "uris": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "NodeStats": {
        "type": "object",
        "properties": {
          "capacity": {
            "type": "integer"
          },
          "channels": {
            "type": "integer"
          },
          "peers": {
            "type": "integer"
          },
          "oldestChannel": {
            "type": "integer",
            "description": "UNIX timestamp of the block in which the funding transaction of the oldest channel was included"
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          }
        }
      },
      "SwapTreeLeaf": {
        "type": "object",
        "properties": {
          "version": {
            "type": "number",
            "description": "Tapscript version"
          },
          "output": {
            "type": "string",
            "description": "Script encoded as HEX"
          }
        }
      },
      "SwapTree": {
        "type": "object",
        "properties": {
          "claimLeaf": {
            "$ref": "#/components/schemas/SwapTreeLeaf"
          },
          "refundLeaf": {
            "$ref": "#/components/schemas/SwapTreeLeaf"
          }
        }
      },
      "SubmarineRequest": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "required": true,
            "description": "The asset that is sent onchain"
          },
          "to": {
            "type": "string",
            "required": true,
            "description": "The asset that is received on lightning"
          },
          "invoice": {
            "type": "string",
            "required": true,
            "description": "BOLT11 invoice that should be paid on lightning"
          },
          "refundPublicKey": {
            "type": "string",
            "required": true,
            "description": "Public key with which the Submarine Swap can be refunded encoded as HEX"
          },
          "pairHash": {
            "type": "string"
          },
          "referralId": {
            "type": "string"
          }
        }
      },
      "SubmarineResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the created Submarine Swap"
          },
          "bip21": {
            "type": "string",
            "description": "BIP21 for the onchain payment request"
          },
          "address": {
            "type": "string",
            "description": "Onchain HTLC address"
          },
          "swapTree": {
            "$ref": "#/components/schemas/SwapTree"
          },
          "claimPublicKey": {
            "type": "string",
            "description": "Public key of Boltz that will be used to sweep the onchain HTLC"
          },
          "timeoutBlockHeight": {
            "type": "number",
            "description": "Timeout block height of the onchain HTLC"
          },
          "acceptZeroConf": {
            "type": "boolean",
            "description": "Whether 0-conf will be accepted assuming the transaction does not signal RBF and has a reasonably high fee"
          },
          "expectedAmount": {
            "type": "number",
            "description": "Amount that is expected to be sent to the onchain HTLC address in satoshis"
          },
          "blindingKey": {
            "type": "string",
            "description": "Liquid blinding private key encoded as HEX"
          }
        }
      },
      "SubmarineRefundRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "required": true,
            "description": "ID of the Submarine Swap that should be refunded"
          },
          "pubNonce": {
            "type": "string",
            "required": true,
            "description": "Public nonce of the client for the session encoded as HEX"
          },
          "transaction": {
            "type": "string",
            "required": true,
            "description": "Transaction which should be signed encoded as HEX"
          },
          "index": {
            "type": "number",
            "required": true,
            "description": "Index of the input of the transaction that should be signed"
          }
        }
      },
      "PartialSignature": {
        "type": "object",
        "properties": {
          "pubNonce": {
            "type": "string",
            "description": "Public nonce of Boltz encoded as HEX"
          },
          "partialSignature": {
            "type": "string",
            "description": "Partial signature encoded as HEX"
          }
        }
      },
      "ReverseRequest": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "required": true,
            "description": "The asset that is sent on lightning"
          },
          "to": {
            "type": "string",
            "required": true,
            "description": "The asset that is received onchain"
          },
          "preimageHash": {
            "type": "string",
            "required": true,
            "description": "SHA-256 hash of the preimage of the Reverse Swap encoded as HEX"
          },
          "claimPublicKey": {
            "type": "string",
            "required": true,
            "description": "Public key with which the Reverse Swap can be claimed encoded as HEX"
          },
          "invoiceAmount": {
            "type": "string",
            "description": "Amount for which the invoice should be; conflicts with \"onchainAmount\""
          },
          "onchainAmount": {
            "type": "string",
            "description": "Amount that should be locked in the onchain HTLC; conflicts with \"invoiceAmount\""
          },
          "pairHash": {
            "type": "string"
          },
          "referralId": {
            "type": "string"
          }
        }
      },
      "ReverseResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the created Reverse Swap"
          },
          "invoice": {
            "type": "string",
            "description": "Hold invoice of the Reverse Swap"
          },
          "swapTree": {
            "$ref": "#/components/schemas/SwapTree"
          },
          "lockupAddress": {
            "type": "string",
            "description": "HTLC address in which coins will be locked"
          },
          "refundPublicKey": {
            "type": "string",
            "description": "Public key of Boltz that will be used to refund the onchain HTLC"
          },
          "timeoutBlockHeight": {
            "type": "number",
            "description": "Timeout block height of the onchain HTLC"
          },
          "onchainAmount": {
            "type": "number",
            "description": "Amount that will be locked in the onchain HTLC"
          },
          "blindingKey": {
            "type": "string",
            "description": "Liquid blinding private key encoded as HEX"
          }
        }
      },
      "ReverseClaimRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "required": true,
            "description": "ID of the Reverse Swap that should be refunded"
          },
          "preimage": {
            "type": "string",
            "required": true,
            "description": "Preimage of the Reverse Swap encoded as HEX"
          },
          "pubNonce": {
            "type": "string",
            "required": true,
            "description": "Public nonce of the client for the session encoded as HEX"
          },
          "transaction": {
            "type": "string",
            "required": true,
            "description": "Transaction which should be signed encoded as HEX"
          },
          "index": {
            "type": "number",
            "required": true,
            "description": "Index of the input of the transaction that should be signed"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Nodes",
      "description": "Lightning nodes"
    },
    {
      "name": "Submarine",
      "description": "Submarine Swap related endpoints"
    },
    {
      "name": "Reverse",
      "description": "Reverse Swap related endpoints"
    }
  ],
  "servers": [
    {
      "url": "https://api.boltz.exchange/v2",
      "description": "Mainnet"
    },
    {
      "url": "https://api.testnet.boltz.exchange/v2",
      "description": "Testnet"
    },
    {
      "url": "http://localhost:9001/v2",
      "description": "Regtest"
    }
  ]
}